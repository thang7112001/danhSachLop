import { useState } from "react";

export default function SchoolManager() {
    const [classes, setClasses] = useState([
        { name: "12A01", teacher: "C√¥ Lan" },
        { name: "12A02", teacher: "Th·∫ßy Minh" },
    ]);

    const [students, setStudents] = useState([
        { name: "V≈© ƒê√¨nh Duy Anh", age: 17, className: "12A01", score: 8.0 },
        { name: "Ph·∫°m Qu·ªëc Anh", age: 17, className: "12A01", score: 8.2 },
        { name: "Tr·∫ßn Qu·ª≥nh Anh", age: 17, className: "12A01", score: 9.1 },
        { name: "Nguy·ªÖn Th·ª•c Anh", age: 17, className: "12A01", score: 8.3 },
        { name: "V√µ Qu·ªëc B·∫£o", age: 17, className: "12A01", score: 7.5 },
        { name: "ƒê·ªó Nghi B√¨nh", age: 17, className: "12A01", score: 8.7 },
        { name: "Nguy·ªÖn Tr√≠ D≈©ng", age: 17, className: "12A01", score: 7.8 },
        { name: "Nguy·ªÖn Ti·∫øn ƒê·∫°t", age: 17, className: "12A01", score: 7.9 },
        { name: "L√™ Nguy·ªÖn Kh√°nh Giao", age: 17, className: "12A01", score: 9.0 },
        { name: "L√™ Tr·∫ßn Gia Huy", age: 17, className: "12A01", score: 8.1 },

        { name: "L√™ Tr·∫ßn Th√πy An", age: 17, className: "12A02", score: 9.0 },
        { name: "Ng√¥ Ho√†ng Anh", age: 17, className: "12A02", score: 8.2 },
        { name: "ƒêinh Gia B·∫£o", age: 17, className: "12A02", score: 8.0 },
        { name: "Mai Minh B·∫£o", age: 17, className: "12A02", score: 7.6 },
        { name: "Tr·∫ßn Tr·ªçng D≈©ng", age: 17, className: "12A02", score: 7.9 },
        { name: "Nguy·ªÖn Ng·ªçc H√¢n", age: 17, className: "12A02", score: 8.5 },
        { name: "Ph·∫°m Nh·∫≠t Ho√†ng", age: 17, className: "12A02", score: 7.7 },
        { name: "Tr·∫ßn Sƒ© Ho√†ng", age: 17, className: "12A02", score: 8.4 },
        { name: "L√™ VƒÉn D∆∞∆°ng Huy", age: 17, className: "12A02", score: 8.1 },
        { name: "T∆∞·ªùng Phan L√™ Khi√™m", age: 17, className: "12A02", score: 8.3 },
    ]);

    const [className, setClassName] = useState("");
    const [teacher, setTeacher] = useState("");
    const [editClassIndex, setEditClassIndex] = useState(null);

    const [studentName, setStudentName] = useState("");
    const [studentAge, setStudentAge] = useState("");
    const [studentClass, setStudentClass] = useState("");
    const [studentScore, setStudentScore] = useState("");
    const [editStudentIndex, setEditStudentIndex] = useState(null);

    function addOrEditClass() {
        if (!className || !teacher) return alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß l·ªõp v√† gi√°o vi√™n");
        const newClass = { name: className, teacher };

        if (editClassIndex !== null) {
            const updated = [...classes];
            updated[editClassIndex] = newClass;
            setClasses(updated);
            setEditClassIndex(null);
        } else {
            setClasses([...classes, newClass]);
        }

        setClassName("");
        setTeacher("");
    }

    function editClass(index) {
        setClassName(classes[index].name);
        setTeacher(classes[index].teacher);
        setEditClassIndex(index);
    }

    function deleteClass(index) {
        setClasses(classes.filter((_, i) => i !== index));
    }

    function addOrEditStudent() {
        if (!studentName || !studentAge || !studentClass || !studentScore)
            return alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin h·ªçc sinh");

        const newStudent = {
            name: studentName,
            age: Number(studentAge),
            className: studentClass,
            score: Number(studentScore),
        };

        if (editStudentIndex !== null) {
            const updated = [...students];
            updated[editStudentIndex] = newStudent;
            setStudents(updated);
            setEditStudentIndex(null);
        } else {
            setStudents([...students, newStudent]);
        }

        setStudentName("");
        setStudentAge("");
        setStudentClass("");
        setStudentScore("");
    }

    function editStudent(index) {
        const s = students[index];
        setStudentName(s.name);
        setStudentAge(s.age);
        setStudentClass(s.className);
        setStudentScore(s.score);
        setEditStudentIndex(index);
    }

    function deleteStudent(index) {
        setStudents(students.filter((_, i) => i !== index));
    }

    return (
        <div style={{ padding: "20px" }}>
            <h2>üìö Qu·∫£n l√Ω l·ªõp h·ªçc</h2>
            <input
                placeholder="T√™n l·ªõp"
                value={className}
                onChange={(e) => setClassName(e.target.value)}
            />
            <input
                placeholder="GVCN"
                value={teacher}
                onChange={(e) => setTeacher(e.target.value)}
            />
            <button onClick={addOrEditClass}>
                {editClassIndex !== null ? "C·∫≠p nh·∫≠t l·ªõp" : "Th√™m l·ªõp"}
            </button>

            <ul>
                {classes.map((cls, index) => (
                    <li key={index}>
                        {cls.name} - GVCN: {cls.teacher}
                        <button onClick={() => editClass(index)}>S·ª≠a</button>
                        <button onClick={() => deleteClass(index)}>X√≥a</button>
                    </li>
                ))}
            </ul>

            <hr />

            <h2>üë®‚Äçüéì Qu·∫£n l√Ω h·ªçc sinh</h2>
            <input
                placeholder="T√™n h·ªçc sinh"
                value={studentName}
                onChange={(e) => setStudentName(e.target.value)}
            />
            <input
                type="number"
                placeholder="Tu·ªïi"
                value={studentAge}
                onChange={(e) => setStudentAge(e.target.value)}
            />
            <select
                value={studentClass}
                onChange={(e) => setStudentClass(e.target.value)}
            >
                <option value="">--Ch·ªçn l·ªõp--</option>
                {classes.map((cls, index) => (
                    <option key={index} value={cls.name}>
                        {cls.name}
                    </option>
                ))}
            </select>
            <input
                type="number"
                placeholder="ƒêi·ªÉm"
                value={studentScore}
                onChange={(e) => setStudentScore(e.target.value)}
            />
            <button onClick={addOrEditStudent}>
                {editStudentIndex !== null ? "C·∫≠p nh·∫≠t HS" : "Th√™m HS"}
            </button>

            <table border="1" cellPadding="5" style={{ borderCollapse: 'collapse', width: '100%', marginTop: 20 }}>
                <thead>
                <tr>
                    <th>STT</th>
                    <th>T√™n</th>
                    <th>Tu·ªïi</th>
                    <th>L·ªõp</th>
                    <th>ƒêi·ªÉm</th>
                    <th>H√†nh ƒë·ªông</th>
                </tr>
                </thead>
                <tbody>
                {students.map((s, index) => (
                    <tr key={index}>
                        <td>{index + 1}</td>
                        <td>{s.name}</td>
                        <td>{s.age}</td>
                        <td>{s.className}</td>
                        <td>{s.score}</td>
                        <td>
                            <button onClick={() => editStudent(index)}>S·ª≠a</button>{" "}
                            <button onClick={() => deleteStudent(index)}>X√≥a</button>
                        </td>
                    </tr>
                ))}
                </tbody>
            </table>
        </div>
    );
}
